//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ControllerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInput"",
    ""maps"": [
        {
            ""name"": ""Translate"",
            ""id"": ""e4136234-4153-42f1-9058-5f4c13be6495"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8a1a1951-20e3-4cc4-ab63-6c3b145fad09"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59eac599-2d2c-4c05-bf53-e25a0c6db1dd"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4c58a973-a67f-49ce-8408-06ee3a3a26ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60ac2f66-1e0e-482c-a4d0-c9ad3833acfd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9ea240f0-be4f-40d3-9bf9-94929b52adb4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d32e926f-9382-4941-9a5a-4fda51d61e6c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d752e77-1c8d-44b7-9b55-759feef965f1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Power"",
            ""id"": ""3102d443-5e50-4b5b-814a-4eb78bbde022"",
            ""actions"": [
                {
                    ""name"": ""DronePowerSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""3ea32bcc-6fec-4d4f-924c-f9e9f54dd61e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae9991ec-70e9-4589-b97b-ed277925cec8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DronePowerSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""392ea4de-9813-4213-9b7a-4d1f49dc4701"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DronePowerSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Translate
        m_Translate = asset.FindActionMap("Translate", throwIfNotFound: true);
        m_Translate_Move = m_Translate.FindAction("Move", throwIfNotFound: true);
        // Power
        m_Power = asset.FindActionMap("Power", throwIfNotFound: true);
        m_Power_DronePowerSwitch = m_Power.FindAction("DronePowerSwitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Translate
    private readonly InputActionMap m_Translate;
    private ITranslateActions m_TranslateActionsCallbackInterface;
    private readonly InputAction m_Translate_Move;
    public struct TranslateActions
    {
        private @ControllerInput m_Wrapper;
        public TranslateActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Translate_Move;
        public InputActionMap Get() { return m_Wrapper.m_Translate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TranslateActions set) { return set.Get(); }
        public void SetCallbacks(ITranslateActions instance)
        {
            if (m_Wrapper.m_TranslateActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_TranslateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public TranslateActions @Translate => new TranslateActions(this);

    // Power
    private readonly InputActionMap m_Power;
    private IPowerActions m_PowerActionsCallbackInterface;
    private readonly InputAction m_Power_DronePowerSwitch;
    public struct PowerActions
    {
        private @ControllerInput m_Wrapper;
        public PowerActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @DronePowerSwitch => m_Wrapper.m_Power_DronePowerSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Power; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PowerActions set) { return set.Get(); }
        public void SetCallbacks(IPowerActions instance)
        {
            if (m_Wrapper.m_PowerActionsCallbackInterface != null)
            {
                @DronePowerSwitch.started -= m_Wrapper.m_PowerActionsCallbackInterface.OnDronePowerSwitch;
                @DronePowerSwitch.performed -= m_Wrapper.m_PowerActionsCallbackInterface.OnDronePowerSwitch;
                @DronePowerSwitch.canceled -= m_Wrapper.m_PowerActionsCallbackInterface.OnDronePowerSwitch;
            }
            m_Wrapper.m_PowerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DronePowerSwitch.started += instance.OnDronePowerSwitch;
                @DronePowerSwitch.performed += instance.OnDronePowerSwitch;
                @DronePowerSwitch.canceled += instance.OnDronePowerSwitch;
            }
        }
    }
    public PowerActions @Power => new PowerActions(this);
    public interface ITranslateActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPowerActions
    {
        void OnDronePowerSwitch(InputAction.CallbackContext context);
    }
}
